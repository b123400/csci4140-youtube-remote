// Generated by LiveScript 1.3.1
var http, first, last, rooms, addRoom, removeRoom, generateSessionID, Session, out$ = typeof exports != 'undefined' && exports || this;
http = require('http');
first = function(it){
  return it[0];
};
last = function(it){
  try {
    return it[it.length - 1];
  } catch (e$) {}
};
rooms = [];
addRoom = function(it){
  return function(it){
    if (!in$(it, rooms)) {
      return rooms.push(it);
    }
  }(
  Number(it));
};
removeRoom = function(it){
  return function(it){
    if (it !== -1) {
      return rooms.splice(it, 1);
    }
  }(
  rooms.indexOf(
  Number(it)));
};
out$.generateSessionID = generateSessionID = function(){
  return (function(it){
    return it + 1;
  })(
  last(
  rooms)) || 0;
};
out$.Session = Session = function(io){
  return io.on('connection', function(socket){
    var jointRoom, passCommand;
    console.log('a user connected');
    jointRoom = null;
    socket.on('join', function(data){
      console.log('want join', data);
      socket.join(data.room);
      jointRoom = data.room;
      return addRoom(Number(data.room));
    });
    socket.on('disconnect', function(){
      return function(it){
        if (!it || Object.keys(it) === 0) {
          return removeRoom(jointRoom);
        }
      }(
      io.sockets.adapter.rooms[jointRoom]);
    });
    socket.on('wantPlaylist', function(data){
      console.log('want playlist in rooms ', socket.rooms);
      return function(it){
        return it.emit('wantPlaylist', socket.id);
      }(
      socket.broadcast.to(first(
      socket.rooms.filter(function(r){
        return r !== socket.id;
      }))));
    });
    socket.on('replyPlaylist', function(arg$){
      var playlist, target;
      playlist = arg$.playlist, target = arg$.target;
      console.log('reply with playlist ', playlist, 'to', target);
      return socket.broadcast.to(target).emit('replyPlaylist', playlist);
    });
    socket.on('videoTitle', function(videoID){
      return http.get("http://gdata.youtube.com/feeds/api/videos/" + videoID, function(res){
        var body;
        body = "";
        res.on('data', function(it){
          return body = body + it;
        });
        return res.on('end', function(){
          return socket.emit('videoTitle', last(
          /<title\stype='text'>([^\<]*)<\/title>/g.exec(
          body)));
        });
      });
    });
    passCommand = function(commandName){
      return socket.on(commandName, function(data){
        console.log('someone wants to pass command', commandName, data);
        return socket.rooms.filter(function(r){
          return r !== socket.id;
        }).reduce(function(s, id){
          return s.to(id);
        }, socket.broadcast).emit(commandName, data);
      });
    };
    passCommand('updatePlaylist');
    return ['play', 'pause', 'stop', 'next', 'previous', 'rewind', 'fastforward', 'mute', 'unmute'].forEach(function(it){
      return passCommand(it);
    });
  });
};
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}